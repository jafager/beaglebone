.syntax unified


.text


.global ramtest
ramtest:

	mrs r0, cpsr
	bic r0, r0, 0x1f
	orr r0, r0, 0x13
	msr cpsr, r0

	ldr sp, =stack_supervisor

	bl console_init

	ldr r0, =message_console_initialized
	bl console_puts

	ldr r0, =message_initializing_sdram
	bl console_puts

	bl sdram_init

	ldr r0, =message_sdram_initialized
	bl console_puts


	mov r5, 0				/* test value offset */

memtest:

	ldr r0, =message_initiating_memtest
	bl console_puts

	ldr r4, =0x80000000

write_next_address:

	/* test value is the least significant byte of the address plus the test value offset */
	ldr r6, =0xff
	and r6, r4, r6
	add r6, r6, r5

	/* write to the address */
	strb r6, [r4]

	/* read from the address and make sure the read value is correct */
	ldrb r7, [r4]
	cmp r7, r6
	bne readback_failed

readback_success:

	/* output a progress mark every 16K addresses */
	ldr r6, =0xfffff
	and r7, r4, r6
	cmp r7, r6
	bne no_progress_mark
	mov r0, '.'
	bl console_putc

no_progress_mark:

	/* if we're not at the end of main memory, move on to the next address */
	ldr r6, =0x9fffffff
	cmp r4, r6
	beq delayed_memtest
	add r4, r4, 1
	b write_next_address

readback_failed:

	ldr r0, =message_readback_failed
	bl console_puts
	b readback_success

delayed_memtest:

	ldr r0, =message_memtest_complete
	bl console_puts

	ldr r0, =message_initiating_delayed_memtest
	bl console_puts

	ldr r4, =0x80000000

next_delayed_address:

	/* test value is the least significant byte of the address plus the test value offset */
	ldr r6, =0xff
	and r6, r4, r6
	add r6, r6, r5

	/* read from the address and make sure the read value is correct */
	ldrb r7, [r4]
	cmp r7, r6
	bne delayed_read_failed

delayed_read_success:

	/* output a progress mark every 16K addresses */
	ldr r6, =0xfffff
	and r7, r0, r6
	cmp r7, r6
	bne no_delayed_progress_mark
	mov r0, '.'
	bl console_putc

no_delayed_progress_mark:

	/* if we're not at the end of main memory, move on to the next address */
	ldr r6, =0x9fffffff
	cmp r4, r6
	beq memtest_complete
	add r4, r4, 1
	b next_delayed_address

delayed_read_failed:

	ldr r0, =message_delayed_read_failed
	bl console_puts
	b delayed_read_success

memtest_complete:

	add r5, r5, 1
	b memtest


/*
memtest:

	ldr r0, =message_memtest
	bl console_puts

	ldr r0, =0x80000000
next_address:
	ldr r1, =0xff
	and r1, r0, r1
	strb r1, [r0]
	ldrb r2, [r0]
	cmp r1, r2
	beq success
	push {r0-r3}
	ldr r0, =message_memtest_fail
	bl console_puts
	pop {r0-r3}
success:
	ldr r2, =0xfffff
	and r1, r0, r2
	cmp r1, r2
	bne no_update
	push {r0-r3}
	mov r0, '.'
	bl console_putc
	pop {r0-r3}
no_update:
	ldr r1, =0x9fffffff
	cmp r0, r1
	beq done_memtest
	add r0, r0, 1
	b next_address
done_memtest:
	ldr r0, =message_memtest_complete
	bl console_puts

	b memtest
*/

hang:

	b hang


message_console_initialized:
	.asciz "Console initialized.\r\n"

message_initializing_sdram:
	.asciz "Initializing SDRAM.\r\n"

message_sdram_initialized:
	.asciz "SDRAM Initialized.\r\n"

message_memtest:
	.asciz "Initiating memory test.\r\n"

message_memtest_fail:
	.asciz "\r\nMemory test failed cell!\r\n"

message_memtest_complete:
	.asciz "\r\nMemory test complete.\r\n"

message_initiating_memtest:
	.asciz "Initiating memory test.\r\n"

message_readback_failed:
	.asciz "Readback test failed!\r\n"

message_initiating_delayed_memtest:
	.asciz "\r\nInitiating delayed memory test.\r\n"

message_delayed_read_failed:
	.asciz "\r\nDelayed read test failed cell!\r\n"

